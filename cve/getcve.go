package cve

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/wahyuhadi/cve-monit/logger"
	"github.com/wahyuhadi/cve-monit/models"
)

var (
	BaseURL     string = "https://www.cvedetails.com/json-feed.php?product_id=%v"
	CurrentTime        = time.Now()
)

func GetCveByProductID(conf models.Config) (notif []models.NotifDetails, err error) {
	var Notif []models.NotifDetails
	for _, product := range conf.Products {
		URL := fmt.Sprintf(BaseURL, product.ProductID)
		response, err := http.Get(URL)
		if err != nil {
			fmt.Print(err.Error())
			return Notif, err
		}

		responseData, err := ioutil.ReadAll(response.Body)
		if err != nil {
			return Notif, err
		}

		var responseObject models.DetailsFinding
		json.Unmarshal(responseData, &responseObject)

		time := CurrentTime.Format("2006-01-02")
		msg := fmt.Sprintf("get data current time : %v based on product %v ", time, product.ProductName)
		logger.SetLogger("info", msg)

		// timeSub := CurrentTime.AddDate(0, 0, -1)
		// then := timeSub.Format("2006-01-02")
		for _, data := range responseObject {
			// if data.PublishDate == then || data.UpdateDate == time {
			fmt.Println()
			Score := CvssScoreConvert(data.CvssScore)
			isScore := fmt.Sprintf("Score Cvss ->  %v", Score)
			cveID := fmt.Sprintf("CVEID ->  %v", data.CveID)
			PublishDate := fmt.Sprintf("Publish Date %v", data.PublishDate)
			Summary := fmt.Sprintf("Summary -> %v", data.Summary)
			CVEDetails := fmt.Sprintf("URL -> %v", data.URL)
			Product := fmt.Sprintf("Products -> %v", product.ProductName)
			logger.SetLogger("warning", Product)
			logger.SetLogger("warning", cveID)
			logger.SetLogger("warning", isScore)
			logger.SetLogger("warning", PublishDate)
			logger.SetLogger("warning", Summary)
			logger.SetLogger("warning", CVEDetails)
			if product.AccessInternal {
				logger.SetLogger("info", "[+] Internal access")
				if Score == "High" {
					logger.SetLogger("warning", "Medium")
				}
				if Score == "Medium" {
					logger.SetLogger("warning", "Low")
				}

				if Score == "Low" {
					logger.SetLogger("warning", "Info")
				}

				if Score == "Info" {
					logger.SetLogger("warning", "Info")
				}

			} else {
				logger.SetLogger("warning", isScore)
			}

			// add to response aray
			items := models.NotifDetails{
				CveID:       data.CveID,
				Summary:     data.Summary,
				CvssScore:   Score,
				URL:         data.URL,
				PublishDate: data.PublishDate,
				ProductName: product.ProductName,
			}
			Notif = append(Notif, items)

		}
	}

	return Notif, nil
}
